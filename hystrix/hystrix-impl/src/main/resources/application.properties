spring.application.name=hystrix
server.port=8040

eureka.client.service-url.defaultZone=http://127.0.0.1:8100/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# 使用Feign调用接口分两层，ribbon的调用和hystrix的调用，所以ribbon的超时时间和hystrix的超时时间
# 结合就是Feign的超时时间
# 一般情况下都是ribbon的超时时间小于hystrix的超时时间(因为涉及到ribbon的重试机制)
# 因为ribbon的重试机制和Feign的主席机制有冲突，所以源码中默认关闭Feign的重试机制

hystrix.command.default.execution.timout.enabled=true
# hystrix的超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=9000
feign.hystrix.enabled=true

ribbon.ReadTimeout=2000
ribbon.ConnectTimeout=2000
# 同一台实例最大重试次数,不包括首次调用
ribbon.MaxAutoRetries=1
# 重试负载均衡其他的实例最大重试次数，不包括首次调用
ribbon.MaxAutoRetriesNextServer=1
# 是否所有操作都重试
ribbon.OkToRetryOnAllOperations=false

# ribbon重试： MaxAutoRetries + MaxAutoRetriesNextServer + (MaxAutoRetries *MaxAutoRetriesNextServer)
# 即重试三资，一共产生中闪调用
# 如果在重试期间，时间超过了hystrix的超时时间，便会立即执行熔断，执行fallback,所以要根据
# ribbon的配置计算hystrix的超时时间，使得在重试期间不能达到hystrix的超时时间，不然重试机制就会没意义
# hystrix超时时间的计算： (1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout 即按照以上的配置
# hystrix的超时时间应该配置为 （1+1+1）*3=9秒

# 当ribbon超时后且hystrix没有超时，便会采取重试机制。当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。
# 如果设置为true，便会对所有的请求进行重试，如果是put或post等写操作，如果服务器接口没做幂等性，会产生不好的结果，
# 所以OkToRetryOnAllOperations慎用。


management.endpoints.web.exposure.include="*"
management.endpoints.web.base-path=/